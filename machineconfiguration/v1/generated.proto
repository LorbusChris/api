
// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package github.com.openshift.api.machineconfiguration.v1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// ContainerRuntimeConfig describes a customized Container Runtime configuration.
message ContainerRuntimeConfig {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +required
  optional ContainerRuntimeConfigSpec spec = 2;

  // +optional
  optional ContainerRuntimeConfigStatus status = 3;
}

// ContainerRuntimeConfigCondition defines the state of the ContainerRuntimeConfig
message ContainerRuntimeConfigCondition {
  // type specifies the state of the operator's reconciliation functionality.
  optional string type = 1;

  // status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // lastTransitionTime is the time of the last update to the current status object.
  // +nullable
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // reason is the reason for the condition's last transition.  Reasons are PascalCase
  optional string reason = 4;

  // message provides additional information about the current condition.
  // This is only to be consumed by humans.
  optional string message = 5;
}

// ContainerRuntimeConfigList is a list of ContainerRuntimeConfig resources
message ContainerRuntimeConfigList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ContainerRuntimeConfig items = 2;
}

// ContainerRuntimeConfigSpec defines the desired state of ContainerRuntimeConfig
message ContainerRuntimeConfigSpec {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector machineConfigPoolSelector = 1;

  optional ContainerRuntimeConfiguration containerRuntimeConfig = 2;
}

// ContainerRuntimeConfigStatus defines the observed state of a ContainerRuntimeConfig
message ContainerRuntimeConfigStatus {
  // observedGeneration represents the generation observed by the controller.
  // +optional
  optional int64 observedGeneration = 1;

  // conditions represents the latest available observations of current state.
  // +optional
  repeated ContainerRuntimeConfigCondition conditions = 2;
}

// ContainerRuntimeConfiguration defines the tuneables of the container runtime
message ContainerRuntimeConfiguration {
  // pidsLimit specifies the maximum number of processes allowed in a container
  optional int64 pidsLimit = 1;

  // logLevel specifies the verbosity of the logs based on the level it is set to.
  // Options are fatal, panic, error, warn, info, and debug.
  optional string logLevel = 2;

  // logSizeMax specifies the Maximum size allowed for the container log file.
  // Negative numbers indicate that no size limit is imposed.
  // If it is positive, it must be >= 8192 to match/exceed conmon's read buffer.
  optional k8s.io.apimachinery.pkg.api.resource.Quantity logSizeMax = 3;

  // overlaySize specifies the maximum size of a container image.
  // This flag can be used to set quota on the size of container images. (default: 10GB)
  optional k8s.io.apimachinery.pkg.api.resource.Quantity overlaySize = 4;
}

// KubeletConfig describes a customized Kubelet configuration.
message KubeletConfig {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +required
  optional KubeletConfigSpec spec = 2;

  // +optional
  optional KubeletConfigStatus status = 3;
}

// KubeletConfigCondition defines the state of the KubeletConfig
message KubeletConfigCondition {
  // type specifies the state of the operator's reconciliation functionality.
  optional string type = 1;

  // status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // lastTransitionTime is the time of the last update to the current status object.
  // +nullable
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // reason is the reason for the condition's last transition.  Reasons are PascalCase
  optional string reason = 4;

  // message provides additional information about the current condition.
  // This is only to be consumed by humans.
  optional string message = 5;
}

// KubeletConfigList is a list of KubeletConfig resources
message KubeletConfigList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated KubeletConfig items = 2;
}

// KubeletConfigSpec defines the desired state of KubeletConfig
message KubeletConfigSpec {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector machineConfigPoolSelector = 1;

  optional k8s.io.apimachinery.pkg.runtime.RawExtension kubeletConfig = 2;
}

// KubeletConfigStatus defines the observed state of a KubeletConfig
message KubeletConfigStatus {
  // observedGeneration represents the generation observed by the controller.
  // +optional
  optional int64 observedGeneration = 1;

  // conditions represents the latest available observations of current state.
  // +optional
  repeated KubeletConfigCondition conditions = 2;
}

// MachineConfig defines the configuration for a machine
message MachineConfig {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MachineConfigSpec spec = 2;
}

// MachineConfigList is a list of MachineConfig resources
message MachineConfigList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated MachineConfig items = 2;
}

// MachineConfigPool describes a pool of MachineConfigs.
message MachineConfigPool {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +required
  optional MachineConfigPoolSpec spec = 2;

  // +optional
  optional MachineConfigPoolStatus status = 3;
}

// MachineConfigPoolCondition contains condition information for an MachineConfigPool.
message MachineConfigPoolCondition {
  // type of the condition, currently ('Done', 'Updating', 'Failed').
  optional string type = 1;

  // status of the condition, one of ('True', 'False', 'Unknown').
  optional string status = 2;

  // lastTransitionTime is the timestamp corresponding to the last status
  // change of this condition.
  // +nullable
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // reason is a brief machine readable explanation for the condition's last
  // transition.
  optional string reason = 4;

  // message is a human readable description of the details of the last
  // transition, complementing reason.
  optional string message = 5;
}

// MachineConfigPoolList is a list of MachineConfigPool resources
message MachineConfigPoolList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated MachineConfigPool items = 2;
}

// MachineConfigPoolSpec is the spec for MachineConfigPool resource.
message MachineConfigPoolSpec {
  // machineConfigSelector specifies a label selector for MachineConfigs.
  // Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ on how label and selectors work.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector machineConfigSelector = 1;

  // nodeSelector specifies a label selector for Machines
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector nodeSelector = 2;

  // paused specifies whether or not changes to this machine config pool should be stopped.
  // This includes generating new desiredMachineConfig and update of machines.
  optional bool paused = 3;

  // maxUnavailable specifies the percentage or constant number of machines that can be updating at any given time.
  // default is 1.
  optional k8s.io.apimachinery.pkg.util.intstr.IntOrString maxUnavailable = 4;

  // The targeted MachineConfig object for the machine config pool.
  optional MachineConfigPoolStatusConfiguration configuration = 5;
}

// MachineConfigPoolStatus is the status for MachineConfigPool resource.
message MachineConfigPoolStatus {
  // observedGeneration represents the generation observed by the controller.
  // +optional
  optional int64 observedGeneration = 1;

  // configuration represents the current MachineConfig object for the machine config pool.
  optional MachineConfigPoolStatusConfiguration configuration = 2;

  // machineCount represents the total number of machines in the machine config pool.
  optional int32 machineCount = 3;

  // updatedMachineCount represents the total number of machines targeted by the pool that have the CurrentMachineConfig as their config.
  optional int32 updatedMachineCount = 4;

  // readyMachineCount represents the total number of ready machines targeted by the pool.
  optional int32 readyMachineCount = 5;

  // unavailableMachineCount represents the total number of unavailable (non-ready) machines targeted by the pool.
  // A node is marked unavailable if it is in updating state or NodeReady condition is false.
  optional int32 unavailableMachineCount = 6;

  // degradedMachineCount represents the total number of machines marked degraded (or unreconcilable).
  // A node is marked degraded if applying a configuration failed..
  optional int32 degradedMachineCount = 7;

  // conditions represents the latest available observations of current state.
  // +optional
  repeated MachineConfigPoolCondition conditions = 8;
}

// MachineConfigPoolStatusConfiguration stores the current configuration for the pool, and
// optionally also stores the list of MachineConfig objects used to generate the configuration.
message MachineConfigPoolStatusConfiguration {
  optional k8s.io.api.core.v1.ObjectReference objectReference = 1;

  // source is the list of MachineConfig objects that were used to generate the single MachineConfig object specified in `content`.
  // +optional
  repeated k8s.io.api.core.v1.ObjectReference source = 2;
}

// MachineConfigSpec is the spec for MachineConfig
message MachineConfigSpec {
  // OSImageURL specifies the remote location that will be used to
  // fetch the OS.
  optional string osImageURL = 1;

  // Config is a Ignition Config object.
  optional k8s.io.apimachinery.pkg.runtime.RawExtension config = 2;

  // +nullable
  repeated string kernelArguments = 3;

  optional bool fips = 4;

  optional string kernelType = 5;
}

